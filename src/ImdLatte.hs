module ImdLatte where

import AbsLatte

-- Haskell module generated by the BNF converter

data Register = Mem Int | RegInt Integer | RegBool Bool | Reg Int
--Reg1 | Reg2 | Reg3 | Reg4 | Reg5
  deriving (Eq, Ord, Show, Read)


data QBlock = QBlock Ident [Quadruple] Int Int
  deriving (Eq, Ord, Show, Read)


type QCode = [Quadruple]

-- niech drugi argument to bedzie zawsze register (nie pamiec)

data Quadruple
    = QAdd Register Register
    | QSub Register Register
    | QMul Register Register
    | QDiv Register Register
    | QMod Register Register
    | QAss Register Register
    | QInc Register
    | QDec Register
    | QRet Register
    | QRetV
    | QLab Ident
    | QJmp Ident

    | QGoToIfEqual Ident Register Register
    | QGoToIfNotEqual Ident Register Register
    | QGoToIfGreater Ident Register Register
    | QGoToIfGreaterEqual Ident Register Register
    | QGoToIfLesser Ident Register Register
    | QGoToIfLesserEqual Ident Register Register


    | QNeg Register
    | QAnd Register Register
    | QOr Register Register
    | QXor Register Register
    | QNot Register
    | QSwap Register Register

    | QCmpIntLt Register Register
    | QCmpIntLe Register Register
    | QCmpIntGt Register Register
    | QCmpIntGe Register Register
    | QCmpIntEq Register Register
    | QCmpIntNe Register Register


    | QAlloc Register Int
    | QConcat Register Register

    | QCall Ident [Register]
    | QLoad Register Register
    | QStore Register Register
    deriving (Eq, Ord, Show, Read)


-- najpierw zaloz, ze nie uzywasz rejestrow ponownie, wszystko zapisuj w zmiennych lokalnych (tu bedzie problem)
-- rozbij na bloki, lista w postaci blok, zmienne lokalne

